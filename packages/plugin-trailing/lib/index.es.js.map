{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\n\nimport { Node } from '@milkdown/prose/model';\nimport { EditorState, Plugin, PluginKey } from '@milkdown/prose/state';\nimport { AtomList, AtomPlugin, createPlugin } from '@milkdown/utils';\n\nexport type ShouldAppend = (lastNode: Node | null, state: EditorState) => boolean;\nexport type Options = {\n    shouldAppend: ShouldAppend;\n    getNode: (state: EditorState) => Node;\n};\n\nexport const trailingPluginKey = new PluginKey('MILKDOWN_TRAILING');\n\nexport const trailingPlugin = createPlugin<string, Options>((_, options) => ({\n    prosePlugins: () => {\n        const shouldAppend: ShouldAppend =\n            options?.shouldAppend ??\n            ((lastNode) => {\n                if (!lastNode) return false;\n\n                if (['heading', 'paragraph'].includes(lastNode.type.name)) {\n                    return false;\n                }\n\n                return true;\n            });\n        const plugin = new Plugin({\n            key: trailingPluginKey,\n            state: {\n                init: (_, state) => {\n                    const lastNode = state.tr.doc.lastChild;\n\n                    return shouldAppend(lastNode, state);\n                },\n                apply: (tr, value, _, state) => {\n                    if (!tr.docChanged) {\n                        return value;\n                    }\n\n                    const lastNode = tr.doc.lastChild;\n\n                    return shouldAppend(lastNode, state);\n                },\n            },\n            appendTransaction: (_, __, state) => {\n                const { doc, tr, schema } = state;\n                const nodeType = options?.getNode?.(state) ?? schema.nodes['paragraph']?.create();\n                const shouldInsertNodeAtEnd = plugin.getState(state);\n                const endPosition = doc.content.size;\n\n                if (!shouldInsertNodeAtEnd || !nodeType) {\n                    return;\n                }\n\n                return tr.insert(endPosition, nodeType);\n            },\n        });\n        return [plugin];\n    },\n}));\n\nexport const trailing: AtomList<AtomPlugin> = AtomList.create([trailingPlugin()]);\n"],"names":[],"mappings":";;AAYa,MAAA,IAAoB,IAAI,EAAU,mBAAmB,GAErD,IAAiB,EAA8B,CAAC,GAAG,MAAa;AAAA,EACzE,cAAc,MAAM;;AAChB,UAAM,IACF,4BAAS,iBAAT,WACC,CAAC,MACM,GAAC,KAED,CAAC,WAAW,WAAW,EAAE,SAAS,EAAS,KAAK,IAAI,IAM1D,IAAS,IAAI,EAAO;AAAA,MACtB,KAAK;AAAA,MACL,OAAO;AAAA,QACH,MAAM,CAAC,GAAG,MAAU;AACV,gBAAA,IAAW,EAAM,GAAG,IAAI;AAEvB,iBAAA,EAAa,GAAU,CAAK;AAAA,QACvC;AAAA,QACA,OAAO,CAAC,GAAI,GAAO,GAAG,MAAU;AACxB,cAAA,CAAC,EAAG;AACG,mBAAA;AAGL,gBAAA,IAAW,EAAG,IAAI;AAEjB,iBAAA,EAAa,GAAU,CAAK;AAAA,QACvC;AAAA,MACJ;AAAA,MACA,mBAAmB,CAAC,GAAG,GAAI,MAAU;;AAC3B,cAAA,EAAE,QAAK,OAAI,cAAW,GACtB,IAAW,iCAAS,YAAT,0BAAmB,OAAnB,WAA6B,OAAO,MAAM,cAAb,kBAA2B,UACnE,IAAwB,EAAO,SAAS,CAAK,GAC7C,IAAc,EAAI,QAAQ;AAE5B,YAAA,GAAC,KAAyB,CAAC;AAIxB,iBAAA,EAAG,OAAO,GAAa,CAAQ;AAAA,MAC1C;AAAA,IAAA,CACH;AACD,WAAO,CAAC,CAAM;AAAA,EAClB;AACJ,EAAE,GAEW,IAAiC,EAAS,OAAO,CAAC,EAAA,CAAgB,CAAC;"}