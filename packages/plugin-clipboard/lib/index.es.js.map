{"version":3,"file":"index.es.js","sources":["../src/clipboard.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport { editorViewOptionsCtx, parserCtx, schemaCtx, serializerCtx } from '@milkdown/core';\nimport { getNodeFromSchema } from '@milkdown/prose';\nimport { DOMParser, Node, Slice } from '@milkdown/prose/model';\nimport { Plugin, PluginKey, TextSelection } from '@milkdown/prose/state';\nimport { createPlugin } from '@milkdown/utils';\n\ntype R = Record<string, unknown>;\nconst isPureText = (content: R | R[] | undefined | null): boolean => {\n    if (!content) return false;\n    if (Array.isArray(content)) {\n        if (content.length > 1) return false;\n        return isPureText(content[0]);\n    }\n\n    const child = content['content'];\n    if (child) {\n        return isPureText(child as R[]);\n    }\n\n    return content['type'] === 'text';\n};\n\nexport const key = new PluginKey('MILKDOWN_CLIPBOARD');\n\nexport const clipboardPlugin = createPlugin(() => {\n    return {\n        prosePlugins: (_, ctx) => {\n            const schema = ctx.get(schemaCtx);\n\n            // Set editable props for https://github.com/Saul-Mirone/milkdown/issues/190\n            ctx.update(editorViewOptionsCtx, (prev) => ({\n                ...prev,\n                editable: prev.editable ?? (() => true),\n            }));\n\n            const plugin = new Plugin({\n                key,\n                props: {\n                    handlePaste: (view, event, originalSlice) => {\n                        const parser = ctx.get(parserCtx);\n                        const serializer = ctx.get(serializerCtx);\n                        const editable = view.props.editable?.(view.state);\n                        const { clipboardData } = event;\n                        if (!editable || !clipboardData) {\n                            return false;\n                        }\n\n                        const currentNode = view.state.selection.$from.node();\n                        if (currentNode.type.spec.code) {\n                            return false;\n                        }\n\n                        let text = clipboardData.getData('text/plain');\n\n                        // if is copied from vscode, try to create a code fence\n                        const vscodeData = clipboardData.getData('vscode-editor-data');\n                        if (vscodeData) {\n                            const data = JSON.parse(vscodeData);\n                            const language = data?.mode;\n                            if (text && language) {\n                                const { tr } = view.state;\n                                const fence = getNodeFromSchema('fence', schema);\n\n                                tr.replaceSelectionWith(fence.create({ language }))\n                                    .setSelection(\n                                        TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))),\n                                    )\n                                    .insertText(text.replace(/\\r\\n?/g, '\\n'));\n\n                                view.dispatch(tr);\n                                return true;\n                            }\n                        }\n\n                        const html = clipboardData.getData('text/html');\n                        if (html.length === 0 && text.length === 0) {\n                            return false;\n                        }\n                        if (html.length > 0 || text.length === 0) {\n                            const dom = document.createElement('template');\n                            dom.innerHTML = html;\n                            const node = DOMParser.fromSchema(schema).parse(dom.content);\n                            dom.remove();\n                            text = serializer(node);\n                        }\n\n                        const slice = parser(text);\n                        if (!slice || typeof slice === 'string') return false;\n\n                        view.dispatch(\n                            view.state.tr.replaceSelection(\n                                new Slice(slice.content, originalSlice.openStart, originalSlice.openEnd),\n                            ),\n                        );\n\n                        return true;\n                    },\n                    clipboardTextSerializer: (slice) => {\n                        const serializer = ctx.get(serializerCtx);\n                        const isText = isPureText(slice.content.toJSON());\n                        if (isText) {\n                            return (slice.content as unknown as Node).textBetween(0, slice.content.size, '\\n\\n');\n                        }\n                        const doc = schema.topNodeType.createAndFill(undefined, slice.content);\n                        if (!doc) return '';\n                        const value = serializer(doc);\n                        return value;\n                    },\n                },\n            });\n\n            return [plugin];\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { clipboardPlugin } from './clipboard';\n\nexport { clipboardPlugin } from './clipboard';\n\nexport const clipboard = clipboardPlugin();\n"],"names":[],"mappings":";;;;;AAQA,MAAM,IAAa,CAAC,MAAiD;AACjE,MAAI,CAAC;AAAgB,WAAA;AACjB,MAAA,MAAM,QAAQ,CAAO;AACrB,WAAI,EAAQ,SAAS,IAAU,KACxB,EAAW,EAAQ,EAAE;AAGhC,QAAM,IAAQ,EAAQ;AACtB,SAAI,IACO,EAAW,CAAY,IAG3B,EAAQ,SAAY;AAC/B,GAEa,IAAM,IAAI,EAAU,oBAAoB,GAExC,IAAkB,EAAa,MACjC;AAAA,EACH,cAAc,CAAC,GAAG,MAAQ;AAChB,UAAA,IAAS,EAAI,IAAI,CAAS;AAG5B,aAAA,OAAO,GAAsB,CAAC,MAAU;;AAAA;AAAA,QACxC,GAAG;AAAA,QACH,UAAU,OAAK,aAAL,WAAwB,MAAA;AAAA,MACpC;AAAA,KAAA,GA8EK,CA5EQ,IAAI,EAAO;AAAA,MACtB;AAAA,MACA,OAAO;AAAA,QACH,aAAa,CAAC,GAAM,GAAO,MAAkB;;AACnC,gBAAA,IAAS,EAAI,IAAI,CAAS,GAC1B,IAAa,EAAI,IAAI,CAAa,GAClC,IAAW,YAAK,OAAM,aAAX,0BAAsB,EAAK,QACtC,EAAE,qBAAkB;AAMtB,cALA,CAAC,KAAY,CAAC,KAKd,AADgB,EAAK,MAAM,UAAU,MAAM,OAC/B,KAAK,KAAK;AACf,mBAAA;AAGP,cAAA,IAAO,EAAc,QAAQ,YAAY;AAGvC,gBAAA,IAAa,EAAc,QAAQ,oBAAoB;AAC7D,cAAI,GAAY;AACN,kBAAA,IAAO,KAAK,MAAM,CAAU,GAC5B,IAAW,uBAAM;AACvB,gBAAI,KAAQ,GAAU;AACZ,oBAAA,EAAE,UAAO,EAAK,OACd,IAAQ,EAAkB,SAAS,CAAM;AAE/C,uBAAG,qBAAqB,EAAM,OAAO,EAAE,YAAU,CAAA,CAAC,EAC7C,aACG,EAAc,KAAK,EAAG,IAAI,QAAQ,KAAK,IAAI,GAAG,EAAG,UAAU,OAAO,CAAC,CAAC,CAAC,CACzE,EACC,WAAW,EAAK,QAAQ,UAAU;AAAA,CAAI,CAAC,GAE5C,EAAK,SAAS,CAAE,GACT;AAAA,YACX;AAAA,UACJ;AAEM,gBAAA,IAAO,EAAc,QAAQ,WAAW;AAC9C,cAAI,EAAK,WAAW,KAAK,EAAK,WAAW;AAC9B,mBAAA;AAEX,cAAI,EAAK,SAAS,KAAK,EAAK,WAAW,GAAG;AAChC,kBAAA,IAAM,SAAS,cAAc,UAAU;AAC7C,cAAI,YAAY;AAChB,kBAAM,IAAO,EAAU,WAAW,CAAM,EAAE,MAAM,EAAI,OAAO;AAC3D,cAAI,OAAO,GACX,IAAO,EAAW,CAAI;AAAA,UAC1B;AAEM,gBAAA,IAAQ,EAAO,CAAI;AACrB,iBAAA,CAAC,KAAS,OAAO,KAAU,WAAiB,KAEhD,GAAK,SACD,EAAK,MAAM,GAAG,iBACV,IAAI,EAAM,EAAM,SAAS,EAAc,WAAW,EAAc,OAAO,CAC3E,CACJ,GAEO;AAAA,QACX;AAAA,QACA,yBAAyB,CAAC,MAAU;AAC1B,gBAAA,IAAa,EAAI,IAAI,CAAa;AAExC,cADe,EAAW,EAAM,QAAQ,OAAQ,CAAA;AAE5C,mBAAQ,EAAM,QAA4B,YAAY,GAAG,EAAM,QAAQ,MAAM;AAAA;AAAA,CAAM;AAEvF,gBAAM,IAAM,EAAO,YAAY,cAAc,QAAW,EAAM,OAAO;AACrE,iBAAK,IACS,EAAW,CAAG,IADX;AAAA,QAGrB;AAAA,MACJ;AAAA,IAAA,CACH,CAEa;AAAA,EAClB;AAAA,EAEP,GC7GY,IAAY,EAAgB;"}