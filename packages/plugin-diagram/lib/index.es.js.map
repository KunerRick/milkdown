{"version":3,"file":"index.es.js","sources":["../src/style.ts","../src/utility.ts","../src/node.ts","../src/remark-mermaid.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\n\nimport { getPalette, ThemeManager } from '@milkdown/core';\n\nexport const getStyle = (themeManager: ThemeManager) => {\n    const palette = getPalette(themeManager);\n    const line = palette('line');\n    const solid = palette('solid');\n    const neutral = palette('neutral');\n    const background = palette('background');\n    const style = {\n        background,\n        primaryColor: background,\n        secondaryColor: line,\n        primaryTextColor: neutral,\n        noteBkgColor: background,\n        noteTextColor: solid,\n        fontSize: '16px',\n    };\n    return Object.entries(style)\n        .filter(([_, value]) => value?.length > 0)\n        .map(([key, value]) => `'${key}':'${value}'`)\n        .join(', ');\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Node } from '@milkdown/prose/model';\nimport { customAlphabet } from 'nanoid';\n\nexport const nanoid = customAlphabet('abcedfghicklmn', 10);\n\nexport const getId = (node?: Node) => node?.attrs?.['identity'] || nanoid();\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey, ThemeInnerEditorType, themeManagerCtx } from '@milkdown/core';\nimport { expectDomTypeError } from '@milkdown/exception';\nimport { setBlockType } from '@milkdown/prose/commands';\nimport { InputRule } from '@milkdown/prose/inputrules';\nimport { NodeSelection } from '@milkdown/prose/state';\nimport { NodeView } from '@milkdown/prose/view';\nimport { createNode } from '@milkdown/utils';\nimport mermaid from 'mermaid';\n// eslint-disable-next-line import/no-unresolved\nimport mermaidAPI from 'mermaid/mermaidAPI';\n\nimport { remarkMermaid } from '.';\nimport { getStyle } from './style';\nimport { getId } from './utility';\n\nconst inputRegex = /^```mermaid$/;\n\nexport type Options = {\n    placeholder: {\n        empty: string;\n        error: string;\n    };\n    theme: mermaidAPI.Theme;\n    themeCSS: string;\n};\n\nexport const TurnIntoDiagram = createCmdKey('TurnIntoDiagram');\n\nexport const diagramNode = createNode<string, Options>((utils, options) => {\n    const theme = options?.theme ?? undefined;\n    const themeCSS = options?.themeCSS ?? undefined;\n\n    const id = 'diagram';\n    mermaid.startOnLoad = false;\n    mermaid.initialize({ startOnLoad: false, theme, themeCSS });\n\n    const placeholder = {\n        empty: 'Empty',\n        error: 'Syntax Error',\n        ...(options?.placeholder ?? {}),\n    };\n\n    return {\n        id,\n        schema: () => ({\n            content: 'text*',\n            group: 'block',\n            marks: '',\n            defining: true,\n            atom: true,\n            code: true,\n            isolating: true,\n            attrs: {\n                value: {\n                    default: '',\n                },\n                identity: {\n                    default: '',\n                },\n            },\n            parseDOM: [\n                {\n                    tag: `div[data-type=\"${id}\"]`,\n                    preserveWhitespace: 'full',\n                    getAttrs: (dom) => {\n                        if (!(dom instanceof HTMLElement)) {\n                            throw expectDomTypeError(dom);\n                        }\n                        return {\n                            value: dom.dataset['value'],\n                            identity: dom.id,\n                        };\n                    },\n                },\n            ],\n            toDOM: (node) => {\n                const identity = getId(node);\n                return [\n                    'div',\n                    {\n                        id: identity,\n                        class: utils.getClassName(node.attrs, 'mermaid'),\n                        'data-type': id,\n                        'data-value': node.attrs['value'] || node.textContent || '',\n                    },\n                    0,\n                ];\n            },\n            parseMarkdown: {\n                match: ({ type }) => type === id,\n                runner: (state, node, type) => {\n                    const value = node['value'] as string;\n                    state.openNode(type, { value });\n                    if (value) {\n                        state.addText(value);\n                    }\n                    state.closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.addNode('code', undefined, node.content.firstChild?.text || '', { lang: 'mermaid' });\n                },\n            },\n        }),\n        commands: (nodeType) => [createCmd(TurnIntoDiagram, () => setBlockType(nodeType, { id: getId() }))],\n        view: (ctx) => (node, view, getPos) => {\n            const currentId = getId(node);\n\n            let header = '';\n            let currentNode = node;\n\n            ctx.get(themeManagerCtx).onFlush(() => {\n                const mermaidVariables = getStyle(utils.themeManager);\n                header = `%%{init: {'theme': 'base', 'themeVariables': { ${mermaidVariables} }}}%%\\n`;\n            });\n\n            const renderer = utils.themeManager.get<ThemeInnerEditorType>('inner-editor', {\n                view,\n                getPos,\n                render: (code) => {\n                    try {\n                        if (!code) {\n                            renderer.preview.innerHTML = placeholder.empty;\n                        } else {\n                            renderer.preview.innerHTML = mermaid.render(currentId, header + code);\n                        }\n                    } catch {\n                        const error = document.getElementById('d' + currentId);\n                        if (error) {\n                            error.remove();\n                        }\n                        renderer.preview.innerHTML = placeholder.error;\n                    } finally {\n                        renderer.dom.appendChild(renderer.preview);\n                    }\n                },\n            });\n\n            if (!renderer) return {} as NodeView;\n\n            const { onUpdate, editor, dom, onFocus, onBlur, onDestroy, stopEvent } = renderer;\n            editor.dataset['type'] = id;\n            dom.classList.add('mermaid', 'diagram');\n\n            onUpdate(currentNode, true);\n\n            ctx.get(themeManagerCtx).onFlush(() => {\n                onUpdate(currentNode, false);\n            }, false);\n\n            return {\n                dom,\n                update: (updatedNode) => {\n                    if (!updatedNode.sameMarkup(currentNode)) return false;\n                    currentNode = updatedNode;\n                    onUpdate(currentNode, false);\n\n                    return true;\n                },\n                selectNode: () => {\n                    onFocus(currentNode);\n                },\n                deselectNode: () => {\n                    onBlur(currentNode);\n                },\n                stopEvent,\n                ignoreMutation: () => true,\n                destroy() {\n                    onDestroy();\n                },\n            };\n        },\n        inputRules: (nodeType) => [\n            new InputRule(inputRegex, (state, _match, start, end) => {\n                const $start = state.doc.resolve(start);\n                if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType)) return null;\n                const tr = state.tr.delete(start, end).setBlockType(start, start, nodeType, { id: getId() });\n\n                return tr.setSelection(NodeSelection.create(tr.doc, start - 1));\n            }),\n        ],\n        remarkPlugins: () => [remarkMermaid],\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Node, Parent } from 'unist';\nimport { visit } from 'unist-util-visit';\n\nconst createMermaidDiv = (contents: string) => ({\n    type: 'diagram',\n    value: contents,\n});\n\nconst visitCodeBlock = (ast: Node) =>\n    visit(ast, 'code', (node, index, parent: Parent) => {\n        const { lang, value } = node;\n\n        // If this codeblock is not mermaid, bail.\n        if (lang !== 'mermaid') {\n            return node;\n        }\n\n        const newNode = createMermaidDiv(value);\n\n        if (parent && index != null) {\n            parent.children.splice(index, 1, newNode);\n        }\n\n        return node;\n    });\n\nexport const remarkMermaid = () => {\n    function transformer(tree: Node) {\n        visitCodeBlock(tree);\n    }\n\n    return transformer;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { AtomList } from '@milkdown/utils';\n\nimport { diagramNode } from './node';\n\nexport * from './remark-mermaid';\n\nexport const diagram = AtomList.create([diagramNode()]);\n\nexport type { Options } from './node';\nexport { diagramNode, TurnIntoDiagram } from './node';\n"],"names":[],"mappings":"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"}