{"version":3,"file":"index.es.js","sources":["../src/math-block/index.ts","../src/math-inline/index.ts","../src/nodes.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport type { ThemeInnerEditorType } from '@milkdown/core';\nimport { expectDomTypeError } from '@milkdown/exception';\nimport { InputRule } from '@milkdown/prose/inputrules';\nimport { NodeSelection } from '@milkdown/prose/state';\nimport { NodeView } from '@milkdown/prose/view';\nimport { createNode } from '@milkdown/utils';\nimport katex, { KatexOptions } from 'katex';\n\nconst inputRegex = /^\\$\\$\\s$/;\n\ntype Options = {\n    placeholder: {\n        empty: string;\n        error: string;\n    };\n    katexOptions: KatexOptions;\n};\n\nexport const mathBlock = createNode<string, Options>((utils, options) => {\n    const id = 'math_block';\n    const placeholder = {\n        empty: 'Empty',\n        error: 'Syntax Error',\n        ...(options?.placeholder ?? {}),\n    };\n    const katexOptions: KatexOptions = {\n        displayMode: true,\n        ...(options?.katexOptions ?? {}),\n    };\n\n    return {\n        id,\n        schema: () => ({\n            content: 'text*',\n            group: 'block',\n            marks: '',\n            defining: true,\n            atom: true,\n            code: true,\n            isolating: true,\n            attrs: {\n                value: {\n                    default: '',\n                },\n            },\n            parseDOM: [\n                {\n                    tag: `div[data-type=\"${id}\"]`,\n                    preserveWhitespace: 'full',\n                    getAttrs: (dom) => {\n                        if (!(dom instanceof HTMLElement)) {\n                            throw expectDomTypeError(dom);\n                        }\n                        return {\n                            value: dom.dataset['value'],\n                        };\n                    },\n                },\n            ],\n            toDOM: (node) => {\n                return [\n                    'div',\n                    {\n                        class: utils.getClassName(node.attrs, 'math-block'),\n                        'data-type': id,\n                        'data-value': node.attrs['value'] || node.textContent || '',\n                    },\n                    0,\n                ];\n            },\n            parseMarkdown: {\n                match: ({ type }) => type === 'math',\n                runner: (state, node, type) => {\n                    const value = node['value'] as string;\n                    state.openNode(type, { value });\n                    if (value) {\n                        state.addText(value);\n                    }\n                    state.closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    let text = '';\n                    node.forEach((n) => {\n                        text += n.text as string;\n                    });\n                    state.addNode('math', undefined, text);\n                },\n            },\n        }),\n        view: () => (node, view, getPos) => {\n            let currentNode = node;\n            const renderer = utils.themeManager.get<ThemeInnerEditorType>('inner-editor', {\n                view,\n                getPos,\n                render: (code) => {\n                    try {\n                        if (!code) {\n                            renderer.preview.innerHTML = placeholder.empty;\n                            renderer.preview.classList.add('system');\n                        } else {\n                            katex.render(code, renderer.preview, katexOptions);\n                            renderer.preview.classList.remove('system');\n                        }\n                    } catch (e) {\n                        if (e instanceof Error) {\n                            console.warn(e.message);\n                        }\n                        renderer.preview.classList.add('system');\n                        renderer.preview.innerHTML = placeholder.error;\n                    } finally {\n                        dom.appendChild(renderer.preview);\n                    }\n                },\n            });\n            if (!renderer) return {} as NodeView;\n\n            const { onUpdate, editor, dom, onFocus, onBlur, onDestroy, stopEvent, preview } = renderer;\n            dom.classList.add('math-block');\n\n            utils.themeManager.onFlush(() => {\n                const system = utils.getStyle(({ css }) => {\n                    return css`\n                        .system {\n                            display: flex;\n                        }\n                    `;\n                });\n                const style = utils.getStyle(({ css }) => {\n                    return css`\n                        display: block;\n                        padding-left: 16px;\n                        padding-right: 16px;\n                    `;\n                });\n                if (style) {\n                    preview.classList.add(style);\n                }\n                if (system) {\n                    dom.classList.add(system);\n                }\n            });\n\n            editor.dataset['type'] = id;\n\n            onUpdate(currentNode, true);\n\n            return {\n                dom,\n                update: (updatedNode) => {\n                    if (!updatedNode.sameMarkup(currentNode)) return false;\n                    currentNode = updatedNode;\n                    onUpdate(currentNode, false);\n\n                    return true;\n                },\n                selectNode: () => {\n                    onFocus(currentNode);\n                },\n                deselectNode: () => {\n                    onBlur(currentNode);\n                },\n                stopEvent,\n                ignoreMutation: () => true,\n                destroy() {\n                    onDestroy();\n                },\n            };\n        },\n        inputRules: (nodeType) => [\n            new InputRule(inputRegex, (state, _match, start, end) => {\n                const $start = state.doc.resolve(start);\n                if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType)) return null;\n                const tr = state.tr.delete(start, end).setBlockType(start, start, nodeType);\n\n                return tr.setSelection(NodeSelection.create(tr.doc, start - 1));\n            }),\n        ],\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { Color, commandsCtx, createCmd, createCmdKey, ThemeColor, ThemeInputChipType, ThemeSize } from '@milkdown/core';\nimport { expectDomTypeError } from '@milkdown/exception';\nimport { findSelectedNodeOfType } from '@milkdown/prose';\nimport { NodeSelection, Plugin, PluginKey } from '@milkdown/prose/state';\nimport { EditorView } from '@milkdown/prose/view';\nimport { createNode } from '@milkdown/utils';\nimport katex, { KatexOptions } from 'katex';\n\ntype Options = {\n    placeholder: {\n        empty: string;\n        error: string;\n    };\n    input: {\n        placeholder: string;\n    };\n    katexOptions: KatexOptions;\n};\n\nconst key = new PluginKey('MILKDOWN_MATH_INPUT');\n\nexport const ModifyInlineMath = createCmdKey<string>('ModifyInlineMath');\nexport const mathInline = createNode<string, Options>((utils, options) => {\n    const placeholder = {\n        empty: '(empty)',\n        error: '(error)',\n        ...(options?.placeholder ?? {}),\n    };\n    const inputPlaceholder = options?.input?.placeholder ?? 'Input Math';\n    const katexOptions: KatexOptions = {\n        ...(options?.katexOptions ?? {}),\n    };\n    const themeManager = utils.themeManager;\n    const getStyle = () =>\n        utils.getStyle(({ css }) => {\n            const palette = (color: Color, opacity = 1) => themeManager.get(ThemeColor, [color, opacity]);\n            const lineWidth = themeManager.get(ThemeSize, 'lineWidth');\n            return css`\n                font-size: unset;\n\n                &.ProseMirror-selectednode {\n                    outline: none;\n                    border: ${lineWidth} solid ${palette('line')};\n                }\n            `;\n        });\n\n    const id = 'math_inline';\n    return {\n        id,\n        schema: () => ({\n            group: 'inline',\n            inline: true,\n            atom: true,\n            attrs: {\n                value: {\n                    default: '',\n                },\n            },\n            parseDOM: [\n                {\n                    tag: `span[data-type=\"${id}\"]`,\n                    getAttrs: (dom) => {\n                        if (!(dom instanceof HTMLElement)) {\n                            throw expectDomTypeError(dom);\n                        }\n                        return {\n                            value: dom.dataset['value'],\n                        };\n                    },\n                },\n            ],\n            toDOM: (node) => {\n                const span = document.createElement('span');\n                span.dataset['type'] = id;\n                span.dataset['value'] = node.attrs['value'];\n                utils.themeManager.onFlush(() => {\n                    const style = getStyle();\n                    if (style) {\n                        span.className = style;\n                    }\n                });\n                return span;\n            },\n            parseMarkdown: {\n                match: (node) => node.type === 'inlineMath',\n                runner: (state, node, type) => {\n                    const code = node['value'] as string;\n                    state.addNode(type, { value: code });\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.addNode('inlineMath', undefined, node.attrs['value']);\n                },\n            },\n        }),\n        commands: (nodeType) => [\n            createCmd(ModifyInlineMath, (value = '') => (state, dispatch) => {\n                const node = findSelectedNodeOfType(state.selection, nodeType);\n                if (!node) return false;\n\n                const { tr } = state;\n                const _tr = tr.setNodeMarkup(node.pos, undefined, { ...node.node.attrs, value });\n                dispatch?.(_tr.setSelection(NodeSelection.create(_tr.doc, node.pos)));\n\n                return true;\n            }),\n        ],\n        view: () => (node) => {\n            let currentNode = node;\n            const dom = document.createElement('span');\n            utils.themeManager.onFlush(() => {\n                const style = getStyle();\n\n                if (style) {\n                    dom.className = style;\n                }\n            });\n            const render = (code: string) => {\n                try {\n                    if (!code) {\n                        dom.innerHTML = placeholder.empty;\n                    } else {\n                        katex.render(code, dom, katexOptions);\n                    }\n                } catch (e) {\n                    if (e instanceof Error) {\n                        console.warn(e.message);\n                    }\n                    dom.innerHTML = placeholder.error;\n                }\n            };\n            render(node.attrs['value']);\n            return {\n                dom,\n                update: (updatedNode) => {\n                    if (!updatedNode.sameMarkup(currentNode)) return false;\n                    currentNode = updatedNode;\n\n                    const newVal = updatedNode.attrs['value'];\n\n                    render(newVal);\n\n                    return true;\n                },\n            };\n        },\n        prosePlugins: (type, ctx) => {\n            return [\n                new Plugin({\n                    key,\n                    view: (editorView) => {\n                        const inputChipRenderer = utils.themeManager.get<ThemeInputChipType>('input-chip', {\n                            placeholder: inputPlaceholder,\n                            onUpdate: (value) => {\n                                ctx.get(commandsCtx).call(ModifyInlineMath, value);\n                            },\n                            isBindMode: true,\n                        });\n                        if (!inputChipRenderer) return {};\n                        const shouldDisplay = (view: EditorView) => {\n                            return Boolean(type && findSelectedNodeOfType(view.state.selection, type));\n                        };\n                        const getCurrentLink = (view: EditorView) => {\n                            const result = findSelectedNodeOfType(view.state.selection, type);\n                            if (!result) return;\n\n                            const value = result.node.attrs['value'];\n                            return value;\n                        };\n                        const renderByView = (view: EditorView) => {\n                            if (!view.editable) {\n                                return;\n                            }\n                            const display = shouldDisplay(view);\n                            if (display) {\n                                inputChipRenderer.show(view);\n                                inputChipRenderer.update(getCurrentLink(view));\n                            } else {\n                                inputChipRenderer.hide();\n                            }\n                        };\n                        inputChipRenderer.init(editorView);\n                        renderByView(editorView);\n\n                        return {\n                            update: (view, prevState) => {\n                                const isEqualSelection =\n                                    prevState?.doc.eq(view.state.doc) && prevState.selection.eq(view.state.selection);\n                                if (isEqualSelection) return;\n\n                                renderByView(view);\n                            },\n                            destroy: () => {\n                                inputChipRenderer.destroy();\n                            },\n                        };\n                    },\n                }),\n            ];\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { AtomList } from '@milkdown/utils';\n\nimport { mathBlock } from './math-block';\nimport { mathInline } from './math-inline';\n\nexport const nodes = AtomList.create([mathInline(), mathBlock()]);\nexport * from './math-block';\nexport * from './math-inline';\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { AtomList, createPlugin } from '@milkdown/utils';\nimport remarkMath from 'remark-math';\n\nimport { nodes } from './nodes';\n\nconst remarkPlugin = createPlugin(() => {\n    return {\n        remarkPlugins: () => [remarkMath],\n    };\n});\n\nexport const math = AtomList.create([remarkPlugin(), ...nodes]);\nexport * from './nodes';\n"],"names":[],"mappings":"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"}