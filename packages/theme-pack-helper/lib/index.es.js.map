{"version":3,"file":"index.es.js","sources":["../src/prosemirror-view.ts","../src/renderer-preset/code-fence.ts","../src/renderer-preset/image.ts","../src/renderer-preset/inner-editor.ts","../src/renderer-preset/input-chip.ts","../src/renderer-preset/task-list-item.ts","../src/renderer-preset/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport { Emotion } from '@milkdown/core';\n\nexport const injectProsemirrorView = ({ injectGlobal }: Emotion) => injectGlobal`\n    /* copy from https://github.com/ProseMirror/@milkdown/prose/blob/master/style/prosemirror.css */\n    .ProseMirror {\n        position: relative;\n    }\n\n    .ProseMirror {\n        word-wrap: break-word;\n        white-space: pre-wrap;\n        white-space: break-spaces;\n        -webkit-font-variant-ligatures: none;\n        font-variant-ligatures: none;\n        font-feature-settings: 'liga' 0; /* the above doesn't seem to work in Edge */\n    }\n\n    .ProseMirror pre {\n        white-space: pre-wrap;\n    }\n\n    .ProseMirror li {\n        position: relative;\n    }\n\n    .ProseMirror-hideselection *::selection {\n        background: transparent;\n    }\n    .ProseMirror-hideselection *::-moz-selection {\n        background: transparent;\n    }\n    .ProseMirror-hideselection {\n        caret-color: transparent;\n    }\n\n    .ProseMirror-selectednode {\n        outline: 2px solid #8cf;\n    }\n\n    /* Make sure li selections wrap around markers */\n\n    li.ProseMirror-selectednode {\n        outline: none;\n    }\n\n    li.ProseMirror-selectednode:after {\n        content: '';\n        position: absolute;\n        left: -32px;\n        right: -2px;\n        top: -2px;\n        bottom: -2px;\n        border: 2px solid #8cf;\n        pointer-events: none;\n    }\n\n    /* Protect against generic img rules */\n\n    img.ProseMirror-separator {\n        display: inline !important;\n        border: none !important;\n        margin: 0 !important;\n    }\n`;\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Emotion, ThemeCodeFenceType, ThemeManager } from '@milkdown/core';\nimport { getPalette, ThemeBorder, ThemeFont, ThemeIcon, ThemeScrollbar, ThemeShadow, ThemeSize } from '@milkdown/core';\nimport type { Node } from '@milkdown/prose/model';\n\nconst getStyle = (manager: ThemeManager, { css }: Emotion) => {\n    const palette = getPalette(manager);\n    const radius = manager.get(ThemeSize, 'radius');\n    const lineWidth = manager.get(ThemeSize, 'lineWidth');\n\n    return css`\n        background-color: ${palette('background')};\n        color: ${palette('neutral')};\n        font-size: 14px;\n        padding: 18px 6px 22px;\n        border-radius: ${radius};\n        font-family: ${manager.get(ThemeFont, 'typography')};\n\n        .code-fence_selector-wrapper {\n            position: relative;\n        }\n\n        .code-fence_selector {\n            width: 180px;\n            box-sizing: border-box;\n            border-radius: ${radius};\n            margin: 0 18px 18px;\n            cursor: pointer;\n            background-color: ${palette('surface')};\n            position: relative;\n            display: flex;\n            color: ${palette('neutral', 0.87)};\n            letter-spacing: 0.5px;\n            height: 42px;\n            align-items: center;\n\n            ${manager.get(ThemeBorder, undefined)};\n            ${manager.get(ThemeShadow, undefined)};\n\n            & > .icon {\n                width: 42px;\n                height: 100%;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                color: ${palette('solid', 0.87)};\n                border-left: ${lineWidth} solid ${palette('line')};\n\n                text-align: center;\n                transition: all 0.2s ease-in-out;\n                &:hover {\n                    background: ${palette('background')};\n                    color: ${palette('primary')};\n                }\n            }\n\n            > span:first-child {\n                padding-left: 16px;\n                flex: 1;\n                font-weight: 500;\n            }\n        }\n\n        .code-fence_selector-list-item {\n            list-style: none;\n            line-height: 2;\n            padding-left: 16px;\n            cursor: pointer;\n            margin: 0 !important;\n            :hover {\n                background: ${palette('secondary', 0.12)};\n                color: ${palette('primary')};\n            }\n        }\n\n        .code-fence_selector-list {\n            &[data-fold='true'] {\n                display: none;\n            }\n\n            margin: 0 !important;\n            font-weight: 500;\n            position: absolute;\n            z-index: 1;\n            top: 42px;\n            box-sizing: border-box;\n            left: 18px;\n            padding: 8px 0;\n            max-height: 260px;\n            width: 180px;\n            background-color: ${palette('surface')};\n            border-top: none;\n            overflow-y: auto;\n            display: flex;\n            flex-direction: column;\n\n            ${manager.get(ThemeScrollbar, ['y'])}\n            ${manager.get(ThemeBorder, undefined)};\n            ${manager.get(ThemeShadow, undefined)};\n        }\n    `;\n};\n\nexport const codeFence = (manager: ThemeManager, emotion: Emotion) => {\n    manager.set<ThemeCodeFenceType>('code-fence', ({ editable, onSelectLanguage, onBlur, onFocus, languageList }) => {\n        const container = document.createElement('div');\n        const selectWrapper = document.createElement('div');\n        const select = document.createElement('ul');\n        const pre = document.createElement('pre');\n        const code = document.createElement('code');\n\n        const valueWrapper = document.createElement('div');\n        valueWrapper.className = 'code-fence_selector';\n\n        const value = document.createElement('span');\n        valueWrapper.appendChild(value);\n\n        const downIcon = manager.get(ThemeIcon, 'downArrow');\n        if (editable() && downIcon) {\n            valueWrapper.appendChild(downIcon.dom);\n        }\n        code.spellcheck = false;\n        selectWrapper.className = 'code-fence_selector-wrapper';\n        selectWrapper.contentEditable = 'false';\n        selectWrapper.append(valueWrapper);\n        selectWrapper.append(select);\n        pre.append(code);\n        const codeContent = document.createElement('div');\n        code.append(codeContent);\n        codeContent.style.whiteSpace = 'inherit';\n        container.append(selectWrapper, pre);\n\n        container.classList.add('code-fence');\n\n        manager.onFlush(() => {\n            const style = getStyle(manager, emotion);\n            if (style) {\n                container.classList.add(style);\n            }\n        });\n\n        select.className = 'code-fence_selector-list';\n        select.addEventListener('mousedown', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!editable()) return;\n\n            const el = e.target;\n            if (!(el instanceof HTMLLIElement)) return;\n            const value = el.dataset['value'];\n            if (value != null) {\n                onSelectLanguage(value);\n            }\n        });\n        valueWrapper.addEventListener('mousedown', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!editable()) return;\n            onFocus();\n        });\n\n        const onClickOutside = () => {\n            if (!editable() || select.dataset['fold'] === 'true') return;\n\n            onBlur();\n        };\n        document.addEventListener('mousedown', onClickOutside);\n\n        languageList.forEach((lang) => {\n            const option = document.createElement('li');\n            option.className = 'code-fence_selector-list-item';\n            option.innerText = lang || '--';\n            select.appendChild(option);\n            option.setAttribute('data-value', lang);\n        });\n\n        const onUpdate = (node: Node) => {\n            container.dataset['language'] = node.attrs['language'];\n            value.innerText = node.attrs['language'] || '--';\n            select.setAttribute('data-fold', node.attrs['fold'] ? 'true' : 'false');\n        };\n\n        const onDestroy = () => {\n            container.remove();\n            document.removeEventListener('mousedown', onClickOutside);\n        };\n\n        return {\n            dom: container,\n            contentDOM: codeContent,\n            onUpdate,\n            onDestroy,\n        };\n    });\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Emotion, getPalette, Icon, ThemeIcon, ThemeImageType, ThemeManager, ThemeSize } from '@milkdown/core';\nimport type { Node } from '@milkdown/prose/model';\n\nexport const image = (manager: ThemeManager, { css }: Emotion) => {\n    const palette = getPalette(manager);\n\n    manager.set<ThemeImageType>('image', ({ placeholder, isBlock, onError, onLoad }) => {\n        const createIcon = (icon: Icon) => manager.get(ThemeIcon, icon)?.dom as HTMLElement;\n        const container = document.createElement('span');\n        container.classList.add('image-container');\n\n        manager.onFlush(() => {\n            const style = css`\n                display: inline-block;\n                position: relative;\n                text-align: center;\n                font-size: 0;\n                vertical-align: text-bottom;\n                line-height: 1;\n\n                ${isBlock\n                    ? `\n                width: 100%;\n                margin: 0 auto;\n                `\n                    : ''}\n\n                &.ProseMirror-selectednode::after {\n                    content: '';\n                    background: ${palette('secondary', 0.38)};\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                }\n\n                img {\n                    max-width: 100%;\n                    height: auto;\n                    object-fit: contain;\n                    margin: 0 2px;\n                }\n                .icon,\n                .placeholder {\n                    display: none;\n                }\n\n                &.system {\n                    width: 100%;\n                    padding: 0 32px;\n                    font-size: inherit;\n\n                    img {\n                        width: 0;\n                        height: 0;\n                        display: none;\n                    }\n\n                    .icon,\n                    .placeholder {\n                        display: inline;\n                    }\n\n                    box-sizing: border-box;\n                    height: 48px;\n                    background-color: ${palette('background')};\n                    border-radius: ${manager.get(ThemeSize, 'radius')};\n                    display: inline-flex;\n                    gap: 32px;\n                    justify-content: flex-start;\n                    align-items: center;\n                    .placeholder {\n                        margin: 0;\n                        line-height: 1;\n                        &::before {\n                            content: '';\n                            font-size: 14px;\n                            color: ${palette('neutral', 0.6)};\n                        }\n                    }\n                }\n\n                &.empty {\n                    .placeholder {\n                        &::before {\n                            content: '${placeholder}';\n                        }\n                    }\n                }\n            `;\n\n            if (style) {\n                container.classList.add(style);\n            }\n        });\n\n        const content = document.createElement('img');\n\n        container.append(content);\n        let icon = createIcon('image');\n        const $placeholder = document.createElement('span');\n        $placeholder.classList.add('placeholder');\n        container.append(icon, $placeholder);\n\n        const setIcon = (name: Icon) => {\n            const nextIcon = createIcon(name);\n            container.replaceChild(nextIcon, icon);\n            icon = nextIcon;\n        };\n\n        const loadImage = (src: string) => {\n            container.classList.add('system', 'loading');\n            setIcon('loading');\n            const img = document.createElement('img');\n            img.src = src;\n\n            img.onerror = () => {\n                onError?.(img);\n            };\n\n            img.onload = () => {\n                onLoad?.(img);\n            };\n        };\n\n        const onUpdate = (node: Node) => {\n            const { src, alt, title, loading, failed } = node.attrs;\n            content.src = src;\n            content.title = title || alt;\n            content.alt = alt;\n\n            if (src.length === 0) {\n                container.classList.add('system', 'empty');\n                setIcon('image');\n                return;\n            }\n\n            if (loading) {\n                loadImage(src);\n                return;\n            }\n\n            if (failed) {\n                container.classList.remove('loading', 'empty');\n                container.classList.add('system', 'failed');\n                setIcon('brokenImage');\n                return;\n            }\n\n            if (src.length > 0) {\n                container.classList.remove('system', 'empty', 'loading');\n                return;\n            }\n\n            container.classList.add('system', 'empty');\n            setIcon('image');\n        };\n\n        return {\n            dom: container,\n            onUpdate,\n        };\n    });\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Emotion, getPalette, ThemeFont, ThemeInnerEditorType, ThemeManager, ThemeSize } from '@milkdown/core';\nimport { baseKeymap, chainCommands, deleteSelection } from '@milkdown/prose/commands';\nimport { history, redo, undo } from '@milkdown/prose/history';\nimport { keymap } from '@milkdown/prose/keymap';\nimport { Node } from '@milkdown/prose/model';\nimport { EditorState, TextSelection } from '@milkdown/prose/state';\nimport { StepMap } from '@milkdown/prose/transform';\nimport { EditorView } from '@milkdown/prose/view';\n\nconst getStyle = (manager: ThemeManager, { css }: Emotion) => {\n    const palette = getPalette(manager);\n    const radius = manager.get(ThemeSize, 'radius');\n    const code = manager.get(ThemeFont, 'code');\n\n    const codeStyle = css`\n        color: ${palette('neutral', 0.87)};\n        background-color: ${palette('background')};\n        border-radius: ${radius};\n        padding: 16px 32px;\n        font-size: 14px;\n        font-family: ${code};\n        overflow: hidden;\n        line-height: 1.5;\n        .ProseMirror {\n            outline: none;\n        }\n    `;\n\n    const hideCodeStyle = css`\n        display: none;\n    `;\n\n    const previewPanelStyle = css`\n        display: flex;\n        justify-content: center;\n        padding: 16px 0;\n    `;\n\n    return {\n        codeStyle,\n        hideCodeStyle,\n        previewPanelStyle,\n    };\n};\n\nconst createInnerEditor = (outerView: EditorView, getPos: () => number) => {\n    let isEditing = false;\n    let innerView: EditorView | undefined;\n\n    const openEditor = ($: HTMLElement, doc: Node) => {\n        innerView = new EditorView($, {\n            state: EditorState.create({\n                doc,\n                plugins: [\n                    history(),\n                    keymap({\n                        ...baseKeymap,\n                        Backspace: chainCommands(deleteSelection, (state) => {\n                            if (!state.selection.empty) {\n                                return false;\n                            }\n                            if (innerView && innerView.state.doc.textContent.length > 0) {\n                                return false;\n                            }\n                            const { dispatch, state: outerState } = outerView;\n                            const p = outerState.schema.nodes['paragraph']?.create();\n                            if (!p) return false;\n                            const tr = outerState.tr.replaceSelectionWith(p);\n                            let start = tr.selection.from - 2;\n                            if (start < 0) {\n                                start = 0;\n                            }\n                            dispatch(tr.setSelection(TextSelection.create(tr.doc, start)));\n                            outerView.focus();\n                            return true;\n                        }),\n                        'Mod-Enter': (_, dispatch) => {\n                            if (dispatch) {\n                                const { state } = outerView;\n                                const { to } = state.selection;\n                                const p = state.schema.nodes['paragraph']?.createAndFill();\n                                if (!p) return false;\n                                const tr = state.tr.replaceWith(to, to, p);\n                                outerView.dispatch(tr.setSelection(TextSelection.create(tr.doc, to)));\n                                outerView.focus();\n                            }\n\n                            return true;\n                        },\n                    }),\n                    keymap({\n                        'Mod-z': undo,\n                        'Mod-y': redo,\n                        'Shift-Mod-z': redo,\n                    }),\n                ],\n            }),\n            plugins: [],\n            dispatchTransaction: (tr) => {\n                if (!innerView) return;\n                const { state, transactions } = innerView.state.applyTransaction(tr);\n                innerView.updateState(state);\n\n                if (!tr.getMeta('fromOutside')) {\n                    const outerTr = outerView.state.tr;\n                    const offsetMap = StepMap.offset(getPos() + 1);\n\n                    transactions.forEach((transaction) => {\n                        const { steps } = transaction;\n                        steps.forEach((step) => {\n                            const mapped = step.map(offsetMap);\n\n                            if (!mapped) {\n                                throw Error('step discarded!');\n                            }\n                            outerTr.step(mapped);\n                        });\n                    });\n                    if (outerTr.docChanged) outerView.dispatch(outerTr);\n                }\n            },\n        });\n        innerView.focus();\n        const { state } = innerView;\n        innerView.dispatch(state.tr.setSelection(TextSelection.create(state.doc, 0)));\n        isEditing = true;\n    };\n\n    const closeEditor = () => {\n        if (innerView) {\n            innerView.destroy();\n        }\n        innerView = undefined;\n        isEditing = false;\n    };\n\n    return {\n        isEditing: () => isEditing,\n        innerView: () => innerView,\n        openEditor,\n        closeEditor,\n    };\n};\n\nexport const innerEditor = (manager: ThemeManager, emotion: Emotion) => {\n    manager.set<ThemeInnerEditorType>('inner-editor', ({ view, getPos, render }) => {\n        const inner$ = createInnerEditor(view, getPos);\n        const dom = document.createElement('div');\n        dom.classList.add('math-block');\n        const editor = document.createElement('div');\n        const preview = document.createElement('div');\n\n        let codeStyle = '';\n        let hideCodeStyle = '';\n        let previewPanelStyle = '';\n\n        manager.onFlush(() => {\n            ({ codeStyle, hideCodeStyle, previewPanelStyle } = getStyle(manager, emotion));\n            if (codeStyle && hideCodeStyle) {\n                editor.classList.add(codeStyle, hideCodeStyle);\n            }\n\n            if (previewPanelStyle) {\n                preview.classList.add(previewPanelStyle);\n            }\n        });\n\n        dom.append(editor);\n\n        return {\n            dom,\n            preview,\n            editor,\n            onUpdate: (node, isInit) => {\n                if (isInit) {\n                    const value = node.attrs['value'] || node.textContent || '';\n                    editor.dataset['value'] = value;\n                    render(value);\n                    return;\n                }\n\n                const innerView = inner$.innerView();\n                if (innerView) {\n                    const state = innerView.state;\n                    const start = node.content.findDiffStart(state.doc.content);\n                    if (start != null) {\n                        const diff = node.content.findDiffEnd(state.doc.content);\n                        if (diff) {\n                            let { a: endA, b: endB } = diff;\n                            const overlap = start - Math.min(endA, endB);\n                            if (overlap > 0) {\n                                endA += overlap;\n                                endB += overlap;\n                            }\n                            innerView.dispatch(\n                                state.tr.replace(start, endB, node.slice(start, endA)).setMeta('fromOutside', true),\n                            );\n                        }\n                    }\n                }\n\n                const newVal = node.content.firstChild?.text || '';\n                editor.dataset['value'] = newVal;\n\n                render(newVal);\n            },\n            onFocus: (node) => {\n                if (!view.editable) return;\n                if (hideCodeStyle) {\n                    editor.classList.remove(hideCodeStyle);\n                }\n                inner$.openEditor(editor, node);\n                dom.classList.add('ProseMirror-selectednode');\n            },\n            onBlur: () => {\n                if (hideCodeStyle) {\n                    editor.classList.add(hideCodeStyle);\n                }\n                inner$.closeEditor();\n                dom.classList.remove('ProseMirror-selectednode');\n            },\n            onDestroy: () => {\n                preview.remove();\n                editor.remove();\n                dom.remove();\n            },\n            stopEvent: (event) => {\n                const innerView = inner$.innerView();\n                const { target } = event;\n                const isChild = target && innerView?.dom.contains(target as Element);\n                return !!(innerView && isChild);\n            },\n        };\n    });\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport {\n    Emotion,\n    getPalette,\n    ThemeBorder,\n    ThemeInputChipType,\n    ThemeManager,\n    ThemeShadow,\n    ThemeSize,\n} from '@milkdown/core';\nimport { missingRootElement } from '@milkdown/exception';\nimport { calculateTextPosition } from '@milkdown/prose';\nimport { EditorView } from '@milkdown/prose/view';\n\nconst getStyle = (manager: ThemeManager, { css }: Emotion, options: { width: string }) => {\n    const palette = getPalette(manager);\n    return css`\n        ${manager.get(ThemeBorder, undefined)}\n        ${manager.get(ThemeShadow, undefined)}\n\n        display: inline-flex;\n        justify-content: space-between;\n        align-items: center;\n        position: absolute;\n        background: ${palette('surface')};\n        border-radius: ${manager.get(ThemeSize, 'radius')};\n        font-size: 16px;\n\n        height: 56px;\n        box-sizing: border-box;\n        width: ${options.width};\n        padding: 0 16px;\n        gap: 16px;\n        z-index: 2;\n\n        input,\n        button {\n            all: unset;\n        }\n\n        input {\n            flex-grow: 1;\n            caret-color: ${palette('primary')};\n            &::placeholder {\n                color: ${palette('neutral', 0.6)};\n            }\n        }\n\n        button {\n            cursor: pointer;\n            height: 36px;\n            color: ${palette('primary')};\n            font-size: 14px;\n            padding: 0 8px;\n            font-weight: 500;\n            letter-spacing: 1.25px;\n            &:hover {\n                background-color: ${palette('secondary', 0.12)};\n            }\n            &.disable {\n                color: ${palette('neutral', 0.38)};\n                cursor: not-allowed;\n                &:hover {\n                    background: transparent;\n                }\n            }\n            &.hide {\n                display: none;\n            }\n        }\n\n        &.hide {\n            display: none;\n        }\n    `;\n};\n\nconst calcInputPos = (view: EditorView, input: HTMLDivElement) => {\n    calculateTextPosition(view, input, (start, end, target, parent) => {\n        const $editor = view.dom.parentElement;\n        if (!$editor) {\n            throw missingRootElement();\n        }\n\n        const selectionWidth = end.left - start.left;\n        let left = start.left - parent.left - (target.width - selectionWidth) / 2;\n        const top = start.bottom - parent.top + 14 + $editor.scrollTop;\n\n        if (left < 0) left = 0;\n\n        return [top, left];\n    });\n};\n\nexport const inputChip = (manager: ThemeManager, emotion: Emotion) => {\n    manager.set<ThemeInputChipType>(\n        'input-chip',\n        ({ isBindMode, onUpdate, buttonText, placeholder, width = '400px', calculatePosition = calcInputPos }) => {\n            let button: HTMLButtonElement | null = null;\n            let disabled = false;\n            let value = '';\n            const wrapper = document.createElement('div');\n\n            manager.onFlush(() => {\n                const style = getStyle(manager, emotion, { width });\n\n                if (style) {\n                    wrapper.classList.add(style);\n                }\n            });\n\n            wrapper.classList.add('tooltip-input');\n\n            const input = document.createElement('input');\n            if (placeholder) {\n                input.placeholder = placeholder;\n            }\n            wrapper.appendChild(input);\n\n            if (!isBindMode) {\n                button = document.createElement('button');\n                button.innerText = buttonText || 'APPLY';\n                wrapper.appendChild(button);\n            }\n            const hide = () => {\n                wrapper.classList.add('hide');\n            };\n            const show = (editorView: EditorView) => {\n                wrapper.classList.remove('hide');\n                calculatePosition(editorView, wrapper);\n            };\n\n            const onInput = (e: Event) => {\n                const { target } = e;\n                if (!(target instanceof HTMLInputElement)) {\n                    return;\n                }\n\n                value = target.value;\n\n                if (!button) {\n                    onUpdate(value);\n                    return;\n                }\n\n                if (!value) {\n                    button.classList.add('disable');\n                    disabled = true;\n                    return;\n                }\n\n                button.classList.remove('disable');\n                disabled = false;\n            };\n\n            const onClick = (e: MouseEvent) => {\n                if (disabled) return;\n                e.stopPropagation();\n                onUpdate(value);\n                hide();\n            };\n\n            const onKeydown = (e: KeyboardEvent) => {\n                if ('key' in e && e.key === 'Enter') {\n                    onUpdate(value);\n                    hide();\n                }\n            };\n\n            const destroy = () => {\n                input.removeEventListener('input', onInput);\n                input.removeEventListener('keydown', onKeydown);\n                button?.removeEventListener('mousedown', onClick);\n                wrapper.remove();\n            };\n\n            const init = (editorView: EditorView) => {\n                const $editor = editorView.dom.parentElement;\n                if (!$editor) throw missingRootElement();\n\n                input.addEventListener('input', onInput);\n                input.addEventListener('keydown', onKeydown);\n                button?.addEventListener('mousedown', onClick);\n\n                $editor.appendChild(wrapper);\n                hide();\n            };\n\n            const update = (v: string) => {\n                value = v;\n                input.value = v;\n            };\n\n            return {\n                dom: wrapper,\n                init,\n                show,\n                hide,\n                destroy,\n                update,\n            };\n        },\n    );\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { Emotion, getPalette, Icon, ThemeIcon, ThemeManager, ThemeTaskListItemType } from '@milkdown/core';\n\nexport const taskListItem = (manager: ThemeManager, { css }: Emotion) => {\n    const palette = getPalette(manager);\n\n    manager.set<ThemeTaskListItemType>('task-list-item', ({ onChange, editable }) => {\n        const createIcon = (icon: Icon) => manager.get(ThemeIcon, icon)?.dom as HTMLElement;\n\n        const listItem = document.createElement('li');\n        const checkboxWrapper = document.createElement('label');\n        const checkboxStyler = document.createElement('span');\n        const checkbox = document.createElement('input');\n        const content = document.createElement('div');\n\n        let icon = createIcon('unchecked');\n        checkboxWrapper.appendChild(icon);\n        const setIcon = (name: Icon) => {\n            const nextIcon = createIcon(name);\n            checkboxWrapper.replaceChild(nextIcon, icon);\n            icon = nextIcon;\n        };\n\n        checkboxWrapper.append(checkbox, checkboxStyler);\n        listItem.append(checkboxWrapper, content);\n\n        checkboxWrapper.contentEditable = 'false';\n        checkbox.type = 'checkbox';\n        if (!editable()) {\n            checkbox.disabled = true;\n            checkboxWrapper.style.cursor = 'not-allowed';\n        }\n        checkbox.onchange = (event) => {\n            const target = event.target;\n            if (!(target instanceof HTMLInputElement)) return;\n\n            if (!editable()) {\n                checkbox.checked = !checkbox.checked;\n\n                return;\n            }\n\n            event.preventDefault();\n\n            onChange(checkbox.checked);\n        };\n        listItem.dataset['type'] = 'task-item';\n        listItem.classList.add('task-list-item');\n\n        manager.onFlush(() => {\n            const style = css`\n                list-style-type: none;\n                position: relative;\n\n                & > div {\n                    overflow: hidden;\n                    padding: 0 2px;\n                    width: 100%;\n                }\n\n                label {\n                    display: inline-block;\n                    width: 24px;\n                    height: 24px;\n                    cursor: pointer;\n                    input {\n                        visibility: hidden;\n                    }\n                }\n                &[data-checked='true'] {\n                    label {\n                        color: ${palette('primary')};\n                    }\n                }\n                &[data-checked='false'] {\n                    label {\n                        color: ${palette('solid', 0.87)};\n                    }\n                }\n                .paragraph {\n                    margin: 8px 0;\n                }\n            `;\n\n            if (style) {\n                listItem.classList.add(style);\n            }\n        });\n\n        return {\n            dom: listItem,\n            contentDOM: content,\n            onUpdate: (node) => {\n                listItem.dataset['checked'] = node.attrs['checked'];\n                if (node.attrs['checked']) {\n                    checkbox.setAttribute('checked', 'checked');\n                } else {\n                    checkbox.removeAttribute('checked');\n                }\n                setIcon(node.attrs['checked'] ? 'checked' : 'unchecked');\n            },\n        };\n    });\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\nexport * from './code-fence';\nexport * from './image';\nexport * from './inner-editor';\nexport * from './input-chip';\nexport * from './task-list-item';\n\nimport type { Emotion, ThemeManager } from '@milkdown/core';\n\nimport { codeFence } from './code-fence';\nimport { image } from './image';\nimport { innerEditor } from './inner-editor';\nimport { inputChip } from './input-chip';\nimport { taskListItem } from './task-list-item';\n\nexport const useAllPresetRenderer = (manager: ThemeManager, emotion: Emotion) => {\n    [inputChip, image, codeFence, taskListItem, innerEditor].forEach((f) => {\n        f(manager, emotion);\n    });\n};\n"],"names":["getStyle"],"mappings":"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"}