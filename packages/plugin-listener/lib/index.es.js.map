{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport {\n    createSlice,\n    Ctx,\n    EditorViewReady,\n    InitReady,\n    MilkdownPlugin,\n    prosePluginsCtx,\n    serializerCtx,\n    SerializerReady,\n} from '@milkdown/core';\nimport { Node as ProseNode } from '@milkdown/prose/model';\nimport { Plugin, PluginKey } from '@milkdown/prose/state';\n\nclass ListenerManager {\n    private beforeMountedListeners: Array<(ctx: Ctx) => void> = [];\n    private mountedListeners: Array<(ctx: Ctx) => void> = [];\n    private updatedListeners: Array<(ctx: Ctx, doc: ProseNode, prevDoc: ProseNode | null) => void> = [];\n    private markdownUpdatedListeners: Array<(ctx: Ctx, markdown: string, prevMarkdown: string | null) => void> = [];\n    private blurListeners: Array<(ctx: Ctx) => void> = [];\n    private focusListeners: Array<(ctx: Ctx) => void> = [];\n    private destroyListeners: Array<(ctx: Ctx) => void> = [];\n\n    get listeners() {\n        return {\n            beforeMounted: this.beforeMountedListeners,\n            mounted: this.mountedListeners,\n            updated: this.updatedListeners,\n            markdownUpdated: this.markdownUpdatedListeners,\n            blur: this.blurListeners,\n            focus: this.focusListeners,\n            destroy: this.destroyListeners,\n        };\n    }\n\n    beforeMount = (fn: (ctx: Ctx) => void) => {\n        this.beforeMountedListeners.push(fn);\n        return this;\n    };\n\n    mounted = (fn: (ctx: Ctx) => void) => {\n        this.mountedListeners.push(fn);\n        return this;\n    };\n\n    updated = (fn: (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode | null) => void) => {\n        this.updatedListeners.push(fn);\n        return this;\n    };\n\n    markdownUpdated(fn: (ctx: Ctx, markdown: string, prevMarkdown: string | null) => void) {\n        this.markdownUpdatedListeners.push(fn);\n        return this;\n    }\n\n    blur(fn: (ctx: Ctx) => void) {\n        this.blurListeners.push(fn);\n        return this;\n    }\n\n    focus(fn: (ctx: Ctx) => void) {\n        this.focusListeners.push(fn);\n        return this;\n    }\n\n    destroy(fn: (ctx: Ctx) => void) {\n        this.destroyListeners.push(fn);\n        return this;\n    }\n}\n\nexport const listenerCtx = createSlice<ListenerManager>(new ListenerManager(), 'listener');\nexport const key = new PluginKey('MILKDOWN_LISTENER');\n\nexport const listener: MilkdownPlugin = (pre) => {\n    pre.inject(listenerCtx, new ListenerManager());\n\n    return async (ctx) => {\n        await ctx.wait(InitReady);\n        const listener = ctx.get(listenerCtx);\n        const { listeners } = listener;\n\n        listeners.beforeMounted.forEach((fn) => fn(ctx));\n\n        await ctx.wait(SerializerReady);\n        const serializer = ctx.get(serializerCtx);\n\n        let prevDoc: ProseNode | null = null;\n        let prevMarkdown: string | null = null;\n\n        const plugin = new Plugin({\n            key,\n            view: () => {\n                return {\n                    destroy: () => {\n                        listeners.destroy.forEach((fn) => fn(ctx));\n                    },\n                };\n            },\n            props: {\n                handleDOMEvents: {\n                    focus: () => {\n                        listeners.focus.forEach((fn) => fn(ctx));\n                        return false;\n                    },\n                    blur: () => {\n                        listeners.blur.forEach((fn) => fn(ctx));\n                        return false;\n                    },\n                },\n            },\n            state: {\n                init: () => {\n                    // do nothing\n                },\n                apply: (tr) => {\n                    if (!tr.docChanged) return;\n                    const { doc } = tr;\n                    if (listeners.updated.length > 0 && (prevDoc == null || !prevDoc.eq(doc))) {\n                        listeners.updated.forEach((fn) => {\n                            fn(ctx, doc, prevDoc);\n                        });\n                    }\n\n                    if (listeners.markdownUpdated.length > 0 && (prevDoc == null || !prevDoc.eq(doc))) {\n                        const markdown = serializer(tr.doc);\n                        if (prevMarkdown == null || prevMarkdown !== markdown) {\n                            listeners.markdownUpdated.forEach((fn) => {\n                                fn(ctx, markdown, prevMarkdown);\n                            });\n                            prevMarkdown = markdown;\n                        }\n                    }\n\n                    prevDoc = doc;\n                },\n            },\n        });\n        ctx.update(prosePluginsCtx, (x) => x.concat(plugin));\n\n        await ctx.wait(EditorViewReady);\n        listeners.mounted.forEach((fn) => fn(ctx));\n    };\n};\n"],"names":[],"mappings":"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"}