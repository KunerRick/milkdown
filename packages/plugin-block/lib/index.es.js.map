{"version":3,"file":"index.es.js","sources":["../src/config.ts","../src/block-handle-dom.ts","../src/block-menu-dom.ts","../src/remove-possible-table.ts","../src/get-dom-by-pos.ts","../src/select-node-by-dom.ts","../src/serialize-for-clipboard.ts","../src/block-service.ts","../src/create-block-plugin.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\n\nimport { commandsCtx, Ctx, editorViewCtx, Icon } from '@milkdown/core';\nimport { getNodeFromSchema } from '@milkdown/prose';\nimport { setBlockType, wrapIn } from '@milkdown/prose/commands';\n\nimport { ActiveNode } from './select-node-by-dom';\n\nexport type BlockAction = {\n    id: string;\n    icon: Icon | HTMLElement;\n    content: string;\n    command: (ctx: Ctx, active: ActiveNode) => void;\n    disabled: (ctx: Ctx, active: ActiveNode) => boolean;\n};\n\nexport type ConfigBuilder = (ctx: Ctx) => BlockAction[];\n\nexport const defaultConfigBuilder: ConfigBuilder = () => {\n    return [\n        {\n            id: 'text',\n            icon: 'text',\n            content: 'Text',\n            command: (ctx) => {\n                return ctx.get(commandsCtx).call('TurnIntoHeading', 0);\n            },\n            disabled: (_, active) => !active.node.type.isTextblock,\n        },\n        {\n            id: 'h1',\n            icon: 'h1',\n            content: 'Heading 1',\n            command: (ctx) => ctx.get(commandsCtx).call('TurnIntoHeading', 1),\n            disabled: (_, active) => !active.node.type.isTextblock,\n        },\n        {\n            id: 'h2',\n            icon: 'h2',\n            content: 'Heading 2',\n            command: (ctx) => ctx.get(commandsCtx).call('TurnIntoHeading', 2),\n            disabled: (_, active) => !active.node.type.isTextblock,\n        },\n        {\n            id: 'h3',\n            icon: 'h3',\n            content: 'Heading 3',\n            command: (ctx) => ctx.get(commandsCtx).call('TurnIntoHeading', 3),\n            disabled: (_, active) => !active.node.type.isTextblock,\n        },\n        {\n            id: 'bullet_list',\n            icon: 'bulletList',\n            content: 'Bullet list',\n            command: (ctx) => ctx.get(commandsCtx).call('WrapInBulletList'),\n            disabled: (ctx) => {\n                const view = ctx.get(editorViewCtx);\n                const node = getNodeFromSchema('bullet_list', view.state.schema);\n                return !wrapIn(node)(view.state);\n            },\n        },\n        {\n            id: 'ordered_list',\n            icon: 'orderedList',\n            content: 'Ordered list',\n            command: (ctx) => ctx.get(commandsCtx).call('WrapInOrderedList'),\n            disabled: (ctx) => {\n                const view = ctx.get(editorViewCtx);\n                const node = getNodeFromSchema('ordered_list', view.state.schema);\n                return !wrapIn(node)(view.state);\n            },\n        },\n        {\n            id: 'task_list',\n            icon: 'taskList',\n            content: 'Task list',\n            command: (ctx) => ctx.get(commandsCtx).call('TurnIntoTaskList'),\n            disabled: (ctx) => {\n                const view = ctx.get(editorViewCtx);\n                const node = getNodeFromSchema('task_list_item', view.state.schema);\n                return !wrapIn(node)(view.state);\n            },\n        },\n        {\n            id: 'blockquote',\n            icon: 'quote',\n            content: 'Blockquote',\n            command: (ctx) => ctx.get(commandsCtx).call('WrapInBlockquote'),\n            disabled: (ctx) => {\n                const view = ctx.get(editorViewCtx);\n                const node = getNodeFromSchema('blockquote', view.state.schema);\n                return !wrapIn(node)(view.state);\n            },\n        },\n        {\n            id: 'code_fence',\n            icon: 'code',\n            content: 'Code',\n            command: (ctx) => ctx.get(commandsCtx).call('TurnIntoCodeFence'),\n            disabled: (ctx) => {\n                const view = ctx.get(editorViewCtx);\n                const node = getNodeFromSchema('fence', view.state.schema);\n                return !setBlockType(node)(view.state);\n            },\n        },\n    ];\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { getPalette, ThemeIcon, ThemeSize } from '@milkdown/core';\nimport { missingRootElement } from '@milkdown/exception';\nimport { EditorView } from '@milkdown/prose/view';\nimport { ThemeUtils } from '@milkdown/utils';\n\nexport class BlockHandleDOM {\n    readonly dom$: HTMLElement;\n\n    #utils: ThemeUtils;\n    constructor(utils: ThemeUtils) {\n        this.#utils = utils;\n        this.dom$ = this.#createDOM();\n        this.#injectStyle();\n    }\n\n    #injectStyle() {\n        const { themeManager, getStyle } = this.#utils;\n        themeManager.onFlush(() => {\n            if (!this.dom$) return;\n\n            const style = getStyle(({ css }) => {\n                const palette = getPalette(themeManager);\n                return css`\n                    position: absolute;\n                    color: ${palette('solid')};\n                    cursor: grab;\n                    border-radius: ${themeManager.get(ThemeSize, 'radius')};\n                    transition: background-color 0.4s;\n                    height: 24px;\n                    line-height: 24px;\n                    &:hover {\n                        color: ${palette('primary')};\n                        background-color: ${palette('background')};\n                    }\n                    &.hide {\n                        display: none;\n                    }\n                `;\n            });\n\n            if (style) {\n                const className = ['block-handle', style, 'hide'].filter((x): x is string => x != null).join(' ');\n                this.dom$.className = className;\n            }\n        });\n    }\n\n    #createDOM() {\n        const { themeManager } = this.#utils;\n        const dom = document.createElement('div');\n        dom.draggable = true;\n        const icon = themeManager.get(ThemeIcon, 'dragHandle');\n\n        dom.appendChild(icon.dom);\n\n        return dom;\n    }\n\n    hide() {\n        this.dom$.classList.add('hide');\n    }\n\n    show() {\n        this.dom$.classList.remove('hide');\n    }\n\n    toggle() {\n        this.dom$.classList.toggle('hide');\n    }\n\n    mount(view: EditorView) {\n        view.dom.parentNode?.appendChild(this.dom$);\n    }\n\n    unmount() {\n        this.dom$.remove();\n    }\n\n    render(view: EditorView, el: HTMLElement) {\n        const root = view.dom.parentElement;\n        if (!root) {\n            throw missingRootElement();\n        }\n\n        const targetNodeRect = (<HTMLElement>el).getBoundingClientRect();\n        const rootRect = root.getBoundingClientRect();\n        const handleRect = this.dom$.getBoundingClientRect();\n\n        const left = targetNodeRect.left - rootRect.left - handleRect.width;\n        const top = targetNodeRect.top - rootRect.top + root.scrollTop;\n\n        this.dom$.style.left = `${left}px`;\n        this.dom$.style.top = `${top}px`;\n    }\n}\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { Ctx, getPalette, ThemeBorder, ThemeIcon, ThemeShadow, ThemeSize } from '@milkdown/core';\nimport { missingRootElement } from '@milkdown/exception';\nimport { EditorView } from '@milkdown/prose/view';\nimport { ThemeUtils } from '@milkdown/utils';\n\nimport { BlockHandleDOM } from './block-handle-dom';\nimport { BlockAction, ConfigBuilder } from './config';\nimport { ActiveNode } from './select-node-by-dom';\n\nexport class BlockMenuDOM {\n    readonly dom$: HTMLElement;\n\n    #utils: ThemeUtils;\n    #ctx: Ctx;\n    #configBuilder: ConfigBuilder;\n    #config: BlockAction[];\n    #blockHandle: BlockHandleDOM;\n    #getActive: () => null | ActiveNode;\n    constructor(\n        utils: ThemeUtils,\n        ctx: Ctx,\n        configBuilder: ConfigBuilder,\n        blockHandle: BlockHandleDOM,\n        getActive: () => null | ActiveNode,\n    ) {\n        this.#utils = utils;\n        this.#ctx = ctx;\n        this.#configBuilder = configBuilder;\n        this.#blockHandle = blockHandle;\n        this.#config = this.#configBuilder(this.#ctx);\n        this.#getActive = getActive;\n        this.dom$ = this.#createDOM();\n        this.#injectStyle();\n    }\n\n    #injectStyle() {\n        const { themeManager, getStyle } = this.#utils;\n        themeManager.onFlush(() => {\n            if (!this.dom$) return;\n\n            const style = getStyle(({ css }) => {\n                const palette = getPalette(themeManager);\n                return css`\n                    position: absolute;\n                    cursor: pointer;\n                    background: ${palette('surface')};\n                    z-index: 2;\n                    border-radius: ${themeManager.get(ThemeSize, 'radius')};\n                    width: 140px;\n\n                    ${themeManager.get(ThemeShadow, undefined)};\n                    ${themeManager.get(ThemeBorder, undefined)}\n\n                    &.hide {\n                        display: none;\n                    }\n\n                    .block-menu_item {\n                        font-size: 14px;\n                        display: flex;\n                        height: 24px;\n                        padding: 4px 10px;\n                        align-items: center;\n                        justify-content: start;\n                        gap: 10px;\n                        transition: all 0.4s;\n\n                        &:hover {\n                            background: ${palette('secondary', 0.12)};\n                            color: ${palette('primary')};\n                        }\n\n                        &.hide {\n                            display: none;\n                        }\n                    }\n                `;\n            });\n\n            if (style) {\n                const className = ['block-menu', style, 'hide'].filter((x): x is string => x != null).join(' ');\n                this.dom$.className = className;\n            }\n        });\n    }\n\n    #createDOM() {\n        const dom = document.createElement('div');\n\n        this.#config.forEach(({ icon, content, id }) => {\n            const listItem = document.createElement('div');\n\n            const textDOM = document.createElement('span');\n            textDOM.textContent = content;\n\n            let iconDOM: HTMLElement;\n            if (typeof icon === 'string') {\n                const iconValue = this.#utils.themeManager.get(ThemeIcon, icon);\n                iconDOM = iconValue.dom;\n            } else {\n                iconDOM = icon;\n            }\n\n            listItem.appendChild(iconDOM);\n            listItem.appendChild(textDOM);\n            listItem.dataset['id'] = id;\n            listItem.classList.add('block-menu_item');\n\n            dom.appendChild(listItem);\n        });\n\n        return dom;\n    }\n\n    #clickMenu = (e: MouseEvent) => {\n        let dom: HTMLElement = e.target as HTMLElement;\n        while (dom && !dom.dataset['id'] && dom.parentElement) {\n            dom = dom.parentElement;\n        }\n        if (dom) {\n            const id = dom.dataset['id'];\n            const action = this.#config.find((x) => x.id === id);\n\n            const active = this.#getActive();\n            if (active) {\n                action?.command(this.#ctx, active);\n            }\n        }\n\n        this.#blockHandle.hide();\n        this.hide();\n    };\n\n    hide() {\n        this.dom$.classList.add('hide');\n    }\n\n    show() {\n        this.dom$.classList.remove('hide');\n    }\n\n    toggle() {\n        this.dom$.classList.toggle('hide');\n    }\n\n    mount(view: EditorView) {\n        view.dom.parentNode?.appendChild(this.dom$);\n        this.dom$.addEventListener('click', this.#clickMenu);\n    }\n\n    unmount() {\n        this.dom$.remove();\n        this.dom$.removeEventListener('click', this.#clickMenu);\n    }\n\n    render(view: EditorView, targetNodeRect: DOMRect) {\n        const root = view.dom.parentElement;\n        if (!root) {\n            throw missingRootElement();\n        }\n\n        const noActiveAction = this.#config.reduce((noActive, { disabled, id }) => {\n            const active = this.#getActive();\n            if (!active) return noActive;\n            const isDisabled = disabled(this.#ctx, active);\n\n            const dom = this.dom$.querySelector(`[data-id=\"${id}\"]`);\n            if (!dom) return noActive;\n\n            if (isDisabled) {\n                dom.classList.add('hide');\n                return noActive;\n            }\n\n            dom.classList.remove('hide');\n            return false;\n        }, true);\n        if (noActiveAction) {\n            this.hide();\n            return;\n        }\n\n        const rootRect = root.getBoundingClientRect();\n        const handleRect = this.#blockHandle.dom$.getBoundingClientRect();\n        const menuRect = this.dom$.getBoundingClientRect();\n\n        const left = targetNodeRect.left - rootRect.left - handleRect.width;\n        let top = targetNodeRect.top - rootRect.top + root.scrollTop + handleRect.height;\n\n        if (rootRect.height + rootRect.top - targetNodeRect.bottom < menuRect.height) {\n            const topOffset = targetNodeRect.top - rootRect.top - menuRect.height + root.scrollTop;\n            if (topOffset > 0) {\n                top = topOffset;\n            }\n        }\n\n        this.dom$.style.left = `${left}px`;\n        this.dom$.style.top = `${top}px`;\n    }\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Transaction } from '@milkdown/prose/state';\nimport { dropPoint } from '@milkdown/prose/transform';\nimport { EditorView } from '@milkdown/prose/view';\n\nexport const removePossibleTable = (view: EditorView, event: DragEvent): Transaction | null => {\n    const { state } = view;\n\n    const $pos = state.selection.$anchor;\n    for (let d = $pos.depth; d > 0; d--) {\n        const node = $pos.node(d);\n        if (node.type.spec['tableRole'] == 'table') {\n            const eventPos = view.posAtCoords({ left: event.clientX, top: event.clientY });\n            if (!eventPos) return null;\n            const slice = view.dragging?.slice;\n            if (!slice) return null;\n\n            const $mouse = view.state.doc.resolve(eventPos.pos);\n            const insertPos = dropPoint(view.state.doc, $mouse.pos, slice);\n            if (!insertPos) return null;\n\n            let tr = state.tr;\n            tr = tr.delete($pos.before(d), $pos.after(d));\n\n            const pos = tr.mapping.map(insertPos);\n\n            tr = tr.replaceRange(pos, pos, slice).scrollIntoView();\n\n            return tr;\n        }\n    }\n\n    return null;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { ResolvedPos } from '@milkdown/prose/model';\nimport { EditorView } from '@milkdown/prose/view';\n\nexport const getDOMByPos = (view: EditorView, root: HTMLElement, $pos: ResolvedPos) => {\n    const { node } = view.domAtPos($pos.pos);\n\n    let el: HTMLElement = node as HTMLElement;\n    let parent = el.parentElement;\n    while (parent && parent !== root && $pos.pos === view.posAtDOM(parent, 0)) {\n        el = parent;\n        parent = parent.parentElement;\n    }\n\n    return el;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { missingRootElement } from '@milkdown/exception';\nimport { Node, ResolvedPos } from '@milkdown/prose/model';\nimport { EditorView } from '@milkdown/prose/view';\n\nimport { FilterNodes } from './create-block-plugin';\nimport { getDOMByPos } from './get-dom-by-pos';\n\nconst nodeIsNotBlock = (node: Node) => !node.type.isBlock;\nconst nodeIsFirstChild = (pos: ResolvedPos) => {\n    let parent = pos.parent;\n    const node = pos.node();\n\n    if (parent === node) {\n        parent = pos.node(pos.depth - 1);\n    }\n    if (!parent || parent.type.name === 'doc') return false;\n\n    return parent.firstChild === node;\n};\n\nexport type ActiveNode = Readonly<{\n    $pos: ResolvedPos;\n    node: Node;\n    el: HTMLElement;\n}>;\n\nexport const selectRootNodeByDom = (dom: Element, view: EditorView, filterNodes: FilterNodes): ActiveNode | null => {\n    const root = view.dom.parentElement;\n    if (!root) {\n        throw missingRootElement();\n    }\n\n    const pos = view.posAtDOM(dom, 0);\n    if (pos === 0) return null;\n\n    let $pos = view.state.doc.resolve(pos);\n    let node = $pos.node();\n\n    while (node && (nodeIsNotBlock(node) || nodeIsFirstChild($pos) || !filterNodes(node))) {\n        $pos = view.state.doc.resolve($pos.before());\n        node = $pos.node();\n    }\n\n    $pos = view.state.doc.resolve($pos.pos - $pos.parentOffset);\n\n    const el = getDOMByPos(view, root, $pos);\n\n    return { node, $pos, el };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n/**\n * Copy pasted from https://github.com/ProseMirror/prosemirror-view/blob/master/src/clipboard.ts\n */\n\nimport { DOMSerializer, NodeType, Slice } from '@milkdown/prose/model';\nimport { EditorView } from '@milkdown/prose/view';\n\nlet _detachedDoc: Document | null = null;\nfunction detachedDoc() {\n    return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument('title'));\n}\n\nconst wrapMap: { [node: string]: string[] } = {\n    thead: ['table'],\n    tbody: ['table'],\n    tfoot: ['table'],\n    caption: ['table'],\n    colgroup: ['table'],\n    col: ['table', 'colgroup'],\n    tr: ['table', 'tbody'],\n    td: ['table', 'tbody', 'tr'],\n    th: ['table', 'tbody', 'tr'],\n};\n\nexport function serializeForClipboard(view: EditorView, slice: Slice) {\n    const context = [];\n    let { openStart, openEnd, content } = slice;\n    while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild!.childCount == 1) {\n        openStart -= 1;\n        openEnd -= 1;\n        const node = content.firstChild!;\n        context.push(\n            node.type.name,\n            node.attrs != (node.type as NodeType & { defaultAttrs: unknown }).defaultAttrs ? node.attrs : null,\n        );\n        content = node.content;\n    }\n\n    const serializer = view.someProp('clipboardSerializer') || DOMSerializer.fromSchema(view.state.schema);\n    const doc = detachedDoc(),\n        wrap = doc.createElement('div');\n    wrap.appendChild(serializer.serializeFragment(content, { document: doc }));\n\n    let firstChild = wrap.firstChild,\n        needsWrap,\n        wrappers = 0;\n    while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {\n        for (let i = needsWrap.length - 1; i >= 0; i--) {\n            const wrapper = doc.createElement(needsWrap[i] as string);\n            while (wrap.firstChild) wrapper.appendChild(wrap.firstChild);\n            wrap.appendChild(wrapper);\n            wrappers++;\n        }\n        firstChild = wrap.firstChild;\n    }\n\n    if (firstChild && firstChild.nodeType == 1)\n        (firstChild as HTMLElement).setAttribute(\n            'data-pm-slice',\n            `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ''} ${JSON.stringify(context)}`,\n        );\n\n    const text =\n        view.someProp('clipboardTextSerializer', (f) => f(slice)) ||\n        slice.content.textBetween(0, slice.content.size, '\\n\\n');\n\n    return { dom: wrap, text };\n}\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { Ctx, editorViewCtx } from '@milkdown/core';\nimport { browser } from '@milkdown/prose';\nimport { NodeSelection, Selection } from '@milkdown/prose/state';\nimport { EditorView } from '@milkdown/prose/view';\nimport { ThemeUtils } from '@milkdown/utils';\n\nimport { BlockHandleDOM } from './block-handle-dom';\nimport { BlockMenuDOM } from './block-menu-dom';\nimport { ConfigBuilder } from './config';\nimport { FilterNodes } from './create-block-plugin';\nimport { removePossibleTable } from './remove-possible-table';\nimport { ActiveNode, selectRootNodeByDom } from './select-node-by-dom';\nimport { serializeForClipboard } from './serialize-for-clipboard';\n\nconst brokenClipboardAPI =\n    (browser.ie && <number>browser.ie_version < 15) || (browser.ios && browser.webkit_version < 604);\n\nconst buffer = 20;\n\nexport class BlockService {\n    readonly blockHandle$: BlockHandleDOM;\n    readonly blockMenu$: BlockMenuDOM;\n\n    #createSelection: () => null | Selection = () => {\n        if (!this.#active) return null;\n        const result = this.#active;\n        const view = this.#view;\n\n        if (NodeSelection.isSelectable(result.node)) {\n            const nodeSelection = NodeSelection.create(view.state.doc, result.$pos.pos - 1);\n            view.dispatch(view.state.tr.setSelection(nodeSelection));\n            view.focus();\n            this.#activeSelection = nodeSelection;\n            return nodeSelection;\n        }\n        return null;\n    };\n    #activeSelection: null | Selection = null;\n    #active: null | ActiveNode = null;\n    #activeDOMRect: undefined | DOMRect = undefined;\n\n    #dragging = false;\n    #ctx: Ctx;\n    #filterNodes: FilterNodes;\n\n    get #view() {\n        return this.#ctx.get(editorViewCtx);\n    }\n\n    constructor(ctx: Ctx, utils: ThemeUtils, filterNodes: FilterNodes, configBuilder: ConfigBuilder) {\n        this.#ctx = ctx;\n        this.#filterNodes = filterNodes;\n        this.blockHandle$ = new BlockHandleDOM(utils);\n        this.blockMenu$ = new BlockMenuDOM(utils, ctx, configBuilder, this.blockHandle$, () => this.#active);\n    }\n\n    mount(view: EditorView) {\n        this.blockHandle$.dom$.addEventListener('mousedown', this.#handleMouseDown);\n        this.blockHandle$.dom$.addEventListener('mouseup', this.#handleMouseUp);\n        this.blockHandle$.dom$.addEventListener('dragstart', this.#handleDragStart);\n        this.blockHandle$.mount(view);\n        this.blockMenu$.mount(view);\n    }\n\n    unmount() {\n        this.blockHandle$.dom$.removeEventListener('mousedown', this.#handleMouseDown);\n        this.blockHandle$.dom$.removeEventListener('mouseup', this.#handleMouseUp);\n        this.blockHandle$.dom$.removeEventListener('dragstart', this.#handleDragStart);\n        this.blockHandle$.unmount();\n        this.blockMenu$.unmount();\n    }\n\n    #handleMouseDown = () => {\n        this.#activeDOMRect = this.#active?.el.getBoundingClientRect();\n        this.#createSelection();\n    };\n\n    #handleMouseUp = () => {\n        if (!this.#dragging) {\n            requestAnimationFrame(() => {\n                if (!this.#activeDOMRect) return;\n                this.blockMenu$.toggle();\n                this.blockMenu$.render(this.#view, this.#activeDOMRect);\n                this.#view.focus();\n            });\n\n            return;\n        }\n        this.#dragging = false;\n        this.#activeSelection = null;\n    };\n\n    #handleDragStart = (event: DragEvent) => {\n        this.#dragging = true;\n        const selection = this.#activeSelection;\n\n        // Align the behavior with https://github.com/ProseMirror/prosemirror-view/blob/master/src/input.ts#L608\n        if (event.dataTransfer && selection) {\n            const view = this.#view;\n            const slice = selection.content();\n            event.dataTransfer.effectAllowed = 'copyMove';\n            const { dom, text } = serializeForClipboard(view, slice);\n            event.dataTransfer.clearData();\n            event.dataTransfer.setData(brokenClipboardAPI ? 'Text' : 'text/html', dom.innerHTML);\n            if (!brokenClipboardAPI) event.dataTransfer.setData('text/plain', text);\n            view.dragging = {\n                slice,\n                move: true,\n            };\n        }\n    };\n\n    keydownCallback = () => {\n        this.blockMenu$.hide();\n        this.blockHandle$.hide();\n        return false;\n    };\n\n    mousedownCallback = () => {\n        this.blockMenu$.hide();\n        return false;\n    };\n\n    mousemoveCallback = (view: EditorView, event: MouseEvent) => {\n        if (!view.editable) return false;\n\n        const dom = event.target;\n        if (!(dom instanceof Element)) {\n            if (this.#dragging) return false;\n            this.blockHandle$.hide();\n            return false;\n        }\n\n        const result = selectRootNodeByDom(dom, view, this.#filterNodes);\n        this.#active = result;\n\n        if (!result) {\n            if (this.#dragging) return false;\n            this.blockHandle$.hide();\n            return false;\n        }\n\n        this.blockHandle$.show();\n        this.blockHandle$.render(view, result.el);\n\n        return false;\n    };\n\n    dragoverCallback = (_: EditorView, event: DragEvent) => {\n        if (this.#dragging) {\n            const root = this.#view.dom.parentElement;\n            if (!root) return false;\n\n            const hasHorizontalScrollbar = root.scrollHeight > root.clientHeight;\n\n            const rootRect = root.getBoundingClientRect();\n            if (hasHorizontalScrollbar) {\n                if (root.scrollTop > 0 && Math.abs(event.y - rootRect.y) < buffer) {\n                    const top = root.scrollTop > 10 ? root.scrollTop - 10 : 0;\n                    root.scrollTop = top;\n                    return false;\n                }\n                const totalHeight = Math.round(this.#view.dom.getBoundingClientRect().height);\n                const scrollBottom = Math.round(root.scrollTop + rootRect.height);\n                if (scrollBottom < totalHeight && Math.abs(event.y - (rootRect.height + rootRect.y)) < buffer) {\n                    const top = root.scrollTop + 10;\n                    root.scrollTop = top;\n                    return false;\n                }\n            }\n        }\n        return false;\n    };\n\n    dropCallback = (view: EditorView, _event: MouseEvent) => {\n        if (this.#dragging) {\n            this.blockMenu$.hide();\n            const event = _event as DragEvent;\n            const tr = removePossibleTable(view, event);\n\n            this.#dragging = false;\n\n            if (tr) {\n                view.dispatch(tr);\n\n                event.preventDefault();\n\n                return true;\n            }\n        }\n        return false;\n    };\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Ctx } from '@milkdown/core';\nimport { Node } from '@milkdown/prose/model';\nimport { Plugin, PluginKey } from '@milkdown/prose/state';\nimport { ThemeUtils } from '@milkdown/utils';\n\nimport { BlockService } from './block-service';\nimport { ConfigBuilder } from './config';\n\nexport type FilterNodes = (node: Node) => boolean;\nconst milkdownPluginBlockKey = new PluginKey('MILKDOWN_BLOCK');\n\nexport const createBlockPlugin = (\n    ctx: Ctx,\n    utils: ThemeUtils,\n    filterNodes: FilterNodes,\n    configBuilder: ConfigBuilder,\n) => {\n    const blockHandle = new BlockService(ctx, utils, filterNodes, configBuilder);\n\n    return new Plugin({\n        key: milkdownPluginBlockKey,\n        props: {\n            handleDOMEvents: {\n                drop: (view, event) => {\n                    return blockHandle.dropCallback(view, event as DragEvent);\n                },\n                mousemove: (view, event) => {\n                    return blockHandle.mousemoveCallback(view, event as MouseEvent);\n                },\n                mousedown: () => {\n                    return blockHandle.mousedownCallback();\n                },\n                keydown: () => {\n                    return blockHandle.keydownCallback();\n                },\n                dragover: (view, event) => {\n                    return blockHandle.dragoverCallback(view, event);\n                },\n            },\n        },\n        view: (view) => {\n            blockHandle.mount(view);\n            return {\n                destroy: () => {\n                    blockHandle.unmount();\n                },\n            };\n        },\n    });\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { AtomList, createPlugin } from '@milkdown/utils';\n\nimport { ConfigBuilder, defaultConfigBuilder } from './config';\nimport { createBlockPlugin, FilterNodes } from './create-block-plugin';\n\nexport const defaultNodeFilter: FilterNodes = (node) => {\n    const { name } = node.type;\n    if (name.startsWith('table') && name !== 'table') {\n        return false;\n    }\n    return true;\n};\n\nexport type Options = {\n    filterNodes: FilterNodes;\n    configBuilder: ConfigBuilder;\n};\nexport const blockPlugin = createPlugin<string, Options>((utils, options) => {\n    const filterNodes = options?.filterNodes ?? defaultNodeFilter;\n    const configBuilder = options?.configBuilder ?? defaultConfigBuilder;\n\n    return {\n        prosePlugins: (_, ctx) => {\n            return [createBlockPlugin(ctx, utils, filterNodes, configBuilder)];\n        },\n    };\n});\n\nexport { defaultConfigBuilder } from './config';\n\nexport const block: AtomList = AtomList.create([blockPlugin()]);\n"],"names":[],"mappings":"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"}